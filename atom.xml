<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jelly的博客</title>
  
  <subtitle>好久不见</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2024-06-15T05:36:44.878Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kuzma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode刷题--数组题01</title>
    <link href="http://yoursite.com/2024/06/15/Leetcode%E5%88%B7%E9%A2%98-%E6%95%B0%E7%BB%84%E9%A2%9801/"/>
    <id>http://yoursite.com/2024/06/15/Leetcode%E5%88%B7%E9%A2%98-%E6%95%B0%E7%BB%84%E9%A2%9801/</id>
    <published>2024-06-15T05:30:55.000Z</published>
    <updated>2024-06-15T05:36:44.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode刷题——数组题01"><a href="#Leetcode刷题——数组题01" class="headerlink" title="Leetcode刷题——数组题01"></a>Leetcode刷题——数组题01</h1><p><strong>题目来源：Leetcode</strong></p><h2 id="题一：消失的数字"><a href="#题一：消失的数字" class="headerlink" title="题一：消失的数字"></a>题一：<a href="https://leetcode-cn.com/problems/missing-number-lcci/" target="_blank" rel="noopener">消失的数字</a></h2><p><img src="https://face-manage-kuzma.oss-cn-shanghai.aliyuncs.com/faces1/20211014142821.png" alt=""></p><blockquote><p>题目解读：一个长度为<code>n</code>数组中包含<code>0-n</code>所有整数，唯独缺失了一个，即很容易就知道完整的数组形式</p></blockquote><p>代码（C语言版）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        res ^= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        res ^= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异或运算知识点：<code>a^a=0,0^a=a</code></strong></p><blockquote><p>代码解读：原数组与有缺失元素的数组逐一进行异或运算，两个数组中相同的异或后就为<code>0</code>，最后仅剩一个没有与它相同的数，即数组所缺失的元素。</p></blockquote><h2 id="题二：数组中数字出现的次数"><a href="#题二：数组中数字出现的次数" class="headerlink" title="题二：数组中数字出现的次数"></a>题二：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/" target="_blank" rel="noopener">数组中数字出现的次数</a></h2><p><img src="https://face-manage-kuzma.oss-cn-shanghai.aliyuncs.com/faces1/20211014143915.png" alt=""></p><blockquote><p>题目解读：一个数组中只有一个两个数出现了一次，其余的数都出现了两次，求出这两个数，同时还有时间和空间复杂度的要求</p></blockquote><p>代码（C语言版）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">singleNumbers</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        res ^= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//res = a ^ b</span></span><br><span class="line">    <span class="comment">//a != b,即a ^ b !=0,即res二进制中必有一位为1</span></span><br><span class="line">    <span class="comment">//找出最右1是哪一位</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m &lt; <span class="number">32</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res&amp;(<span class="number">1</span>&lt;&lt;m))&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分离</span></span><br><span class="line">    <span class="keyword">int</span> x1 = <span class="number">0</span>, x2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&amp;(<span class="number">1</span>&lt;&lt;m))&#123;</span><br><span class="line">            x1 ^=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x2 ^=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>* retArr = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line">    retArr[<span class="number">0</span>] = x1;</span><br><span class="line">    retArr[<span class="number">1</span>] = x2;</span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> retArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码解读：这道题相当于上一道题的进阶版，我们同时可以用异或的方法进行思考，出现两次的数异或完都等于0，最终得到的结果为a^b(假设那两个数为a和b),下面只要求出a,b其中之一即可。异或运算法则是同为0异为1，因为a不等于b,所有a^b的结果中必定有一二进制位为1，则a和b的二进制位所在的那一位必然不同，即一个为0，另一个为1，我们可以通过这点不同将数组分为该二进制位为1的为一组，为0的为一组，这样，a和b就会被分进两个不同的组，将这两个组分别单独异或即可分别求出a和b.</p></blockquote><p><strong>难点在于如何获取到那个二进制为1的所在位</strong></p><p><strong><em>方法一</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(m &lt; <span class="number">32</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(res&amp;(<span class="number">1</span>&lt;&lt;m))&#123;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">           m++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过不断地将1左移每次都与异或地结果进行与运算，当结果为1则返回，得出m即左移的位数</p><p><strong><em>方法二(附上完整代码)</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">singleNumbers</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        res ^= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//res = a ^ b</span></span><br><span class="line">    <span class="comment">//a != b,即a ^ b !=0,即res二进制中必有一位为1</span></span><br><span class="line">    <span class="keyword">int</span> rightOne = res &amp; (~res +<span class="number">1</span>);<span class="comment">//取出最右1</span></span><br><span class="line">    <span class="comment">//为1的那一位两个数必定一个为0,一个为1</span></span><br><span class="line">    <span class="keyword">int</span> onlyOne = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((nums[i]&amp;rightOne)==<span class="number">0</span>)&#123;<span class="comment">//找出所有那一位为1的数</span></span><br><span class="line">            onlyOne ^= nums[i];<span class="comment">//将这些数进行相与，最终得到a</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>* retArr = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line">    retArr[<span class="number">0</span>] = onlyOne;</span><br><span class="line">    retArr[<span class="number">1</span>] = onlyOne ^ res;</span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> retArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是<code>int rightOne = res &amp; (~res +1);//取出最右1</code>这行代码进行操作，可直接取出最右1</p><h2 id="题三：数组中数字出现的次数-II"><a href="#题三：数组中数字出现的次数-II" class="headerlink" title="题三：数组中数字出现的次数 II"></a>题三：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/" target="_blank" rel="noopener">数组中数字出现的次数 II</a></h2><p><img src="https://face-manage-kuzma.oss-cn-shanghai.aliyuncs.com/faces1/20211014145934.png" alt=""></p><blockquote><p>题目解读：该题同样也为上一题的进阶版，只有一个出现一次，其余都出现三次，好在这题没有要求时间和空间复杂度，能力暂时还有限，思考了很久也没想出特别优的算法，最后通过先排序再寻找的方法解决了。</p></blockquote><p>代码（C语言版）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先排序</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;numsSize<span class="number">-1</span>;i++)&#123;</span><br><span class="line">         <span class="keyword">int</span> <span class="built_in">min</span> = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j&lt;numsSize;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&lt;nums[<span class="built_in">min</span>])&#123;</span><br><span class="line">                <span class="built_in">min</span> = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">        temp = nums[<span class="built_in">min</span>];</span><br><span class="line">        nums[<span class="built_in">min</span>] = nums[i];</span><br><span class="line">        nums[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>;k&lt;numsSize<span class="number">-2</span>;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[k]==nums[k+<span class="number">1</span>]&amp;&amp;nums[k]==nums[k+<span class="number">2</span>])&#123;</span><br><span class="line">            k +=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码解读：首先排序，排序方法自选，这里我就随便选了个选择排序，排完序后，数组都有序，从头开始遍历，每次索引+3，当遇到连续的三个数不相等时便的得出出现一次的数。</p></blockquote><h2 id="题四：消失的两个数字"><a href="#题四：消失的两个数字" class="headerlink" title="题四：消失的两个数字"></a>题四：<a href="https://leetcode-cn.com/problems/missing-two-lcci/" target="_blank" rel="noopener">消失的两个数字</a></h2><p><img src="https://face-manage-kuzma.oss-cn-shanghai.aliyuncs.com/faces1/20211014150714.png" alt=""></p><blockquote><p>题目解读：该题同时也为上面题目的进进阶版，一数组包含1-n所有数，除了两个数不在，求出这两个数，同时还有时间和空间复杂度的要求。</p></blockquote><p>这里提供了三种算法解答该题</p><p><strong><em>方法一</em></strong></p><p>显然也可以通过异或的方法求解</p><p>代码（C语言版）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">missingTwo</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=numsSize+<span class="number">2</span>;i++)&#123;</span><br><span class="line">        res ^= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        res ^= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//res = a ^ b</span></span><br><span class="line">    <span class="comment">//a != b,即a ^ b !=0,即res二进制中必有一位为1</span></span><br><span class="line">    <span class="keyword">int</span> rightOne = res &amp; (~res +<span class="number">1</span>);<span class="comment">//取出最右1</span></span><br><span class="line">    <span class="comment">//为1的那一位两个数必定一个为0,一个为1</span></span><br><span class="line">    <span class="keyword">int</span> onlyOne = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((nums[i]&amp;rightOne)==<span class="number">0</span>)&#123;<span class="comment">//找出所有那一位为1的数</span></span><br><span class="line">            onlyOne ^= nums[i];<span class="comment">//将这些数进行相与</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=numsSize+<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((i&amp;rightOne)==<span class="number">0</span>)&#123;<span class="comment">//找出所有那一位为1的数</span></span><br><span class="line">            onlyOne ^= i;<span class="comment">//将这些数进行相与</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>* retArr = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line">    retArr[<span class="number">0</span>] = onlyOne;</span><br><span class="line">    retArr[<span class="number">1</span>] = onlyOne ^ res;</span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> retArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码解读：得到<code>a^b</code>的结果和知道1所在的位之后，将缺失元素的数组和完整的数组中那一位为1的所有数进行异或便可得出a,再与<code>a^b</code>异或得到b.</p></blockquote><p><strong><em>方法二</em></strong></p><p>因为该数组中的数是从1开始的而且近乎连续，我们可以就把他们分别当做数组的索引来看</p><p>代码（C语言版）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">missingTwo</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">    <span class="comment">//生成数组空间</span></span><br><span class="line">    <span class="keyword">int</span>* arr =(<span class="keyword">int</span>*)<span class="built_in">calloc</span>(numsSize +<span class="number">3</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* ans = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">2</span>), ansSize = <span class="number">0</span>;</span><br><span class="line">*returnSize = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//将对应的数放到对应的索引位置上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">arr[nums[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numsSize+<span class="number">3</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//遍历数组将索引位置上为0的放到返回数组中去</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] == <span class="number">0</span>)</span><br><span class="line">ans[ansSize++] = i;</span><br><span class="line">            <span class="keyword">if</span>(ansSize==<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码解读：生成一个数组空间，遍历原数组，每取到一个数就把数组中与该数值相等的索引位置上的值+1（初始都为0），例如，第一个数为5，索引为5的位置上的值变为1，因为没有重复数，所以遍历完之后，数组上的值除了0就是1，为0的就是缺失的数，将其返回就好了。</p></blockquote><p><strong><em>方法三</em></strong></p><p>利用求和以及两数平均数解答</p><p>代码（C语言版）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">missingTwo</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=numsSize+<span class="number">2</span>;i++)&#123;</span><br><span class="line">        res1 += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        res1 -= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假设两个数分别为a和b,得到a+b</span></span><br><span class="line">    <span class="keyword">int</span> sumAvg = res1/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>,b = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=numsSize+<span class="number">2</span>;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(i&lt;=sumAvg)&#123;</span><br><span class="line">             a += i;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(nums[i]&lt;=sumAvg)&#123;</span><br><span class="line">             a -= nums[i];</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>* retArr = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line">    retArr[<span class="number">0</span>] = a;</span><br><span class="line">    retArr[<span class="number">1</span>] = res1-a;</span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> retArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码解读：首先利用求和和作差得到a+b,求这两个数的平均数<code>sumAvg</code>,可以知道这两个数必然一个大于<code>sumAvg</code>，另一个小于<code>sumAvg</code>,于是我们便可以通过<code>sumAvg</code>将原数组分为两组，大于<code>sumAvg</code>的一组，小于<code>sumAvg</code>的一组，这样便可用同样的求和作差的方法分别求出a和b了。</p></blockquote><p><strong>补充</strong></p><p>交换两个数的方法可以通过异或操作完成，<strong>但前提条件为这两个数必须不相等</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">2</span>,b=<span class="number">5</span>;</span><br><span class="line"><span class="comment">//已知a!=b,交换两个数</span></span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line"><span class="comment">//交换完成</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode刷题——数组题01&quot;&gt;&lt;a href=&quot;#Leetcode刷题——数组题01&quot; class=&quot;headerlink&quot; title=&quot;Leetcode刷题——数组题01&quot;&gt;&lt;/a&gt;Leetcode刷题——数组题01&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题目
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>利用 GitHub + PicGo搭建属于自己的图床</title>
    <link href="http://yoursite.com/2021/08/13/%E5%88%A9%E7%94%A8-GitHub-PicGo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/"/>
    <id>http://yoursite.com/2021/08/13/%E5%88%A9%E7%94%A8-GitHub-PicGo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</id>
    <published>2021-08-13T14:27:01.000Z</published>
    <updated>2024-06-15T05:10:46.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用-GitHub-PicGo搭建属于自己的图床"><a href="#利用-GitHub-PicGo搭建属于自己的图床" class="headerlink" title="利用 GitHub + PicGo搭建属于自己的图床"></a>利用 GitHub + PicGo搭建属于自己的图床</h2><h3 id="1-软件下载地址"><a href="#1-软件下载地址" class="headerlink" title="1.软件下载地址"></a>1.软件下载地址</h3><ul><li>Typora 官网：<a href="http://typora.io/" target="_blank" rel="noopener">Typora</a></li><li>PicGo 蓝奏云下载地址：<a href="https://www.lanzous.com/ia49ojg" target="_blank" rel="noopener">PicGo-Setup-2.2.2.exe</a></li><li>PicGo 在 GitHub 上的地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">GitHub - PicGo</a></li></ul><h3 id="2-GitHub"><a href="#2-GitHub" class="headerlink" title="2.GitHub"></a>2.GitHub</h3><h4 id="2-1-创建图库"><a href="#2-1-创建图库" class="headerlink" title="2.1 创建图库"></a>2.1 创建图库</h4><p><img src="https://swl-kuzma.oss-cn-beijing.aliyuncs.com/markdown/20200430142248.png" alt=""></p><h4 id="2-2-获取令牌"><a href="#2-2-获取令牌" class="headerlink" title="2.2 获取令牌"></a>2.2 获取令牌</h4><p><strong>大致步骤如下：</strong></p><ul><li><p>点击自己的 GitHub 头像</p></li><li><p>Settings</p></li><li><p>Developer settings</p></li><li><p>Personal access tokens</p></li><li><p>Generate new token</p><p><strong>之后会有这个界面，自己填选，Note注明给谁用，全部勾选</strong></p></li></ul><p><img src="https://swl-kuzma.oss-cn-beijing.aliyuncs.com/markdown/20200430143100.png" alt=""></p><p><strong>生成token</strong></p><p>此时可以保存备用，也可以在下边用到的时候，再按照上述步骤生成 token 。注意 token 是私密的，需要做好安全保护！</p><h3 id="3-本地配置步骤"><a href="#3-本地配置步骤" class="headerlink" title="3.本地配置步骤"></a>3.本地配置步骤</h3><h4 id="3-1-安装配置PicGo"><a href="#3-1-安装配置PicGo" class="headerlink" title="3.1 安装配置PicGo"></a>3.1 安装配置PicGo</h4><ul><li>接下来配置 GitHub 作为图床，在左侧找到<strong>图床设置</strong>，找到<strong>GitHub图床</strong>。</li><li>前边有星号的为必填项，依次填入之前创建的仓库名，注意是：账户名/仓库名；</li><li>然后填入设定的分支名（创建仓库时如果没有创建其他分支，默认就是 master 分支）；</li><li>最后填入之前生成的 token 令牌，点击确定。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0t1em1hNzcvUGljdHVyZS9tYXN0ZXIvMjAyMDA0MzAxNTI3MjIucG5n?x-oss-process=image/format,png" alt=""></p><ul><li>然后找到 PicGo 设置，打开里边的 <strong><em>时间戳重命名</em></strong>，这样可以避免图床在上传文件时，由于文件名相同造成的错误。</li><li>然后剩下的配置项可以不用管，参考的文章不建议设置为开机自启，因为等会配置好 typora 后，typora 在上传图片时会自动打开 PicGo 软件。</li></ul><h4 id="3-2-测试PicGo"><a href="#3-2-测试PicGo" class="headerlink" title="3.2 测试PicGo"></a>3.2 测试PicGo</h4><h3 id="4-其它"><a href="#4-其它" class="headerlink" title="4.其它"></a>4.其它</h3><h4 id="4-1-可能的问题"><a href="#4-1-可能的问题" class="headerlink" title="4.1 可能的问题"></a>4.1 可能的问题</h4><ul><li>GitHub 成功上传图片，但是不能正常显示</li></ul><p>参考的这个网址：<a href="https://blog.csdn.net/weixin_42128813/article/details/102915578" target="_blank" rel="noopener">解决github图片不显示问题</a>，配置后，GitHub 即可正常显示图片</p><h4 id="4-2-相关链接"><a href="#4-2-相关链接" class="headerlink" title="4.2 相关链接"></a>4.2 相关链接</h4><ul><li><a href="https://juejin.im/post/5ea39170f265da47b35c88a7" target="_blank" rel="noopener">链接一</a></li><li><a href="https://zhuanlan.zhihu.com/p/114175770" target="_blank" rel="noopener">链接二</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用-GitHub-PicGo搭建属于自己的图床&quot;&gt;&lt;a href=&quot;#利用-GitHub-PicGo搭建属于自己的图床&quot; class=&quot;headerlink&quot; title=&quot;利用 GitHub + PicGo搭建属于自己的图床&quot;&gt;&lt;/a&gt;利用 GitHub + 
      
    
    </summary>
    
    
      <category term="分享" scheme="http://yoursite.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>文件上传Oss--前、后端结合(基于Springboot)</title>
    <link href="http://yoursite.com/2020/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Oss-%E5%89%8D%E3%80%81%E5%90%8E%E7%AB%AF%E7%BB%93%E5%90%88-%E5%9F%BA%E4%BA%8ESpringboot/"/>
    <id>http://yoursite.com/2020/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Oss-%E5%89%8D%E3%80%81%E5%90%8E%E7%AB%AF%E7%BB%93%E5%90%88-%E5%9F%BA%E4%BA%8ESpringboot/</id>
    <published>2020-05-06T14:05:05.000Z</published>
    <updated>2021-08-13T14:15:57.197Z</updated>
    
    <content type="html"><![CDATA[<p>所需依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.aliyun.oss&#x2F;aliyun-sdk-oss --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun.oss&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-sdk-oss&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.9.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><code>AliOssUtil</code>工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.soft1851.music.admin.util;</span><br><span class="line"></span><br><span class="line">import com.aliyun.oss.OSS;</span><br><span class="line">import com.aliyun.oss.OSSClientBuilder;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author wl_sun</span><br><span class="line"> * @description TODO</span><br><span class="line"> * @Data 2020&#x2F;5&#x2F;1</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Slf4j</span><br><span class="line">public class AliOssUtil &#123;</span><br><span class="line">    public static String upload(MultipartFile sourceFile)&#123;</span><br><span class="line">        &#x2F;&#x2F; 获取文件名</span><br><span class="line">        String fileName &#x3D; sourceFile.getOriginalFilename();</span><br><span class="line">        &#x2F;&#x2F;uuid生成主文件名</span><br><span class="line">        String prefix &#x3D; UUID.randomUUID().toString();</span><br><span class="line">        assert fileName !&#x3D; null;</span><br><span class="line">        &#x2F;&#x2F;源文件的扩展名</span><br><span class="line">        String suffix &#x3D; fileName.substring(fileName.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        &#x2F;&#x2F;创建File类型的临时文件</span><br><span class="line">        File tempFile &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            tempFile &#x3D; File.createTempFile(prefix,suffix);</span><br><span class="line">            &#x2F;&#x2F;将MultipartFile转换成File</span><br><span class="line">            sourceFile.transferTo(tempFile);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        assert tempFile !&#x3D; null;</span><br><span class="line">        return upload(tempFile);</span><br><span class="line">    &#125;</span><br><span class="line">    public static String upload(File file)&#123;</span><br><span class="line">        String endpoint &#x3D; &quot;https:&#x2F;&#x2F;oss-cn-beijing.aliyuncs.com&quot;;</span><br><span class="line">        String accessKeyId &#x3D; &quot;LT************z6jbo4&quot;;</span><br><span class="line">        String accessKeySecret &#x3D; &quot;6vVUW*********KwVZMjkv&quot;;</span><br><span class="line">        String bucketName &#x3D; &quot;bucket名&quot;;</span><br><span class="line">        String filePath &#x3D; &quot;存储路径，默认根目录&quot;;</span><br><span class="line">        String fileName &#x3D; file.getName();</span><br><span class="line">        String newFileName &#x3D; UUID.randomUUID().toString() + fileName.substring(fileName.indexOf(&quot;.&quot;));</span><br><span class="line">        &#x2F;&#x2F;创建OSSClient实例</span><br><span class="line">&#x2F;&#x2F;        OSSClient ossClient  &#x3D; new OSSClient(endpoint,accessKeyId,accessKeySecret);</span><br><span class="line">        OSS ossClient  &#x3D; new OSSClientBuilder().build(endpoint,accessKeyId,accessKeySecret);</span><br><span class="line">        &#x2F;&#x2F;上传文件到指定位置，并使用UUID更名</span><br><span class="line">        ossClient.putObject(bucketName,filePath + newFileName,file);</span><br><span class="line">        &#x2F;&#x2F;拼接URL</span><br><span class="line">        String url &#x3D; &quot;https:&#x2F;&#x2F;bucket名.oss-cn-beijing.aliyuncs.com&#x2F;&quot; + filePath + newFileName;</span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File file &#x3D; new File(&quot;C:\\Users\\HP\\Desktop\\en\\Python库大全.pdf&quot;);</span><br><span class="line">        upload(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>controller类接口编写</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.soft1851.music.admin.controller;</span><br><span class="line"></span><br><span class="line">import com.soft1851.music.admin.annotation.ControllerWebLog;</span><br><span class="line">import com.soft1851.music.admin.common.ResponseResult;</span><br><span class="line">import com.soft1851.music.admin.util.AliOssUtil;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author wl_sun</span><br><span class="line"> * @description TODO</span><br><span class="line"> * @Data 2020&#x2F;5&#x2F;1</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class UploadController &#123;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;&#x2F;uploadFile&quot;)</span><br><span class="line">    @ControllerWebLog</span><br><span class="line">    public ResponseResult uploadSingle(@RequestParam(&quot;file&quot;) MultipartFile sourceFile) &#123;</span><br><span class="line">        String url &#x3D; AliOssUtil.upload(sourceFile);</span><br><span class="line">        return ResponseResult.success(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端调用接口实现(以上传图片为例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;file&quot; @change&#x3D;&quot;uploadImage($event)&quot;  id&#x3D;&quot;fileBox&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">uploadImage() &#123;</span><br><span class="line">      let formData &#x3D; new FormData()</span><br><span class="line">      formData.append(&#39;file&#39;, event.target.files[0])</span><br><span class="line">      this.axios(&#123;</span><br><span class="line">        method: &#39;post&#39;,</span><br><span class="line">        url: this.GLOBAL.baseUrl + &#39;&#x2F;api&#x2F;uploadFile&#39;,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          &#39;Content-Type&#39;: &#39;multipart&#x2F;formdata&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: formData</span><br><span class="line">      &#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(res.data.data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所需依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>文件上传Oss--纯前端（2）</title>
    <link href="http://yoursite.com/2020/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Oss%E2%80%94%E2%80%94%E7%BA%AF%E5%89%8D%E7%AB%AF%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Oss%E2%80%94%E2%80%94%E7%BA%AF%E5%89%8D%E7%AB%AF%EF%BC%882%EF%BC%89/</id>
    <published>2020-05-06T14:03:21.000Z</published>
    <updated>2021-08-13T14:15:22.466Z</updated>
    
    <content type="html"><![CDATA[<p>采用分片式上传，封装成<code>oss.js</code>工具类，方便调用</p><p><code>oss.js</code>工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import OSS from &#39;ali-oss&#39;</span><br><span class="line">const region &#x3D; &#39;oss-cn-beijing&#39;</span><br><span class="line">const accessKeyId &#x3D; &#39;LT********o4&#39;</span><br><span class="line">const accessKeySecret &#x3D; &#39;6vVU******************Mjkv&#39;</span><br><span class="line">const bucket &#x3D; &#39;bucket名&#39;</span><br><span class="line">    const path &#x3D; &#39;存储路径，默认根目录&#39;</span><br><span class="line">let client &#x3D; new OSS(&#123;</span><br><span class="line">  region: region,</span><br><span class="line">  accessKeyId: accessKeyId,</span><br><span class="line">  accessKeySecret: accessKeySecret,</span><br><span class="line">  bucket: bucket,</span><br><span class="line">  path: path</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;  上传</span><br><span class="line">const CooOss &#x3D; function(file) &#123;</span><br><span class="line">  if (this instanceof CooOss) &#123;</span><br><span class="line">    let objectKey &#x3D; file.lastModified + &#39;_&#39; + file.name</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      client</span><br><span class="line">        .multipartUpload(objectKey, file)</span><br><span class="line">        .then((result) &#x3D;&gt; &#123;</span><br><span class="line">          console.log(result)</span><br><span class="line">          resolve(&#123;</span><br><span class="line">            code: 0,</span><br><span class="line">            objectKey: objectKey,</span><br><span class="line">            url: this.getOssFileUrl(objectKey),</span><br><span class="line">            msg: &#39;ok&#39;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) &#x3D;&gt; &#123;</span><br><span class="line">          console(err)</span><br><span class="line">          console.error(&#39;上传出错了&#39;)</span><br><span class="line">          reject(&#123; code: -1, url: &#39;&#39;, objectKey: &#39;&#39;, msg: &#39;上传出错了&#39; &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return new CooOss(file)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;上传是设置文件key 一般是文件名&#125; obecjtKey</span><br><span class="line"> *&#x2F;</span><br><span class="line">CooOss.prototype.getOssFileUrl &#x3D; (obecjtKey) &#x3D;&gt; &#123;</span><br><span class="line">  if (!obecjtKey) return new Error(&#39;object key 必须传&#39;)</span><br><span class="line">  return &#39;https:&#x2F;&#x2F;&#39; + bucket + &#39;.&#39; + region + &#39;.aliyuncs.com&#x2F;&#39; + obecjtKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  install(Vue) &#123;</span><br><span class="line">    Vue.prototype.Oss &#x3D; &#123;</span><br><span class="line">      uploadFile: CooOss,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mian.js</code>调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Oss from &#39;.&#x2F;utils&#x2F;oss&#39;</span><br><span class="line">Vue.use(Oss)</span><br></pre></td></tr></table></figure><p>页面调用(支持多选)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-file-input chip show-size counter multiple accept&#x3D;&quot;image&#x2F;*&quot; label&#x3D;&quot;File input&quot; :value&#x3D;&quot;files&quot; v-model&#x3D;&quot;files&quot;&gt;&lt;&#x2F;v-file-input&gt;</span><br><span class="line">&lt;v-btn small style&#x3D;&quot;margin-left: 16px&quot; @click&#x3D;&quot;uploadFile(files)&quot;&gt;上传&lt;&#x2F;v-btn&gt;</span><br><span class="line"></span><br><span class="line"> uploadFile(files) &#123;</span><br><span class="line">     for (let index &#x3D; 0; index &lt; files.length; index++) &#123;</span><br><span class="line">       const f &#x3D; files[index]</span><br><span class="line">       this.Oss.uploadFile(f).then((res) &#x3D;&gt; &#123;</span><br><span class="line">         console.log(res)</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">     this.files &#x3D; []</span><br><span class="line">     alert(&#39;上传成功&#39;)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;采用分片式上传，封装成&lt;code&gt;oss.js&lt;/code&gt;工具类，方便调用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;oss.js&lt;/code&gt;工具类&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>文件上传`Oss`——纯前端（1）</title>
    <link href="http://yoursite.com/2020/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Oss%E2%80%94%E2%80%94%E7%BA%AF%E5%89%8D%E7%AB%AF%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Oss%E2%80%94%E2%80%94%E7%BA%AF%E5%89%8D%E7%AB%AF%EF%BC%881%EF%BC%89/</id>
    <published>2020-05-06T13:53:01.000Z</published>
    <updated>2021-08-13T14:14:49.741Z</updated>
    
    <content type="html"><![CDATA[<p>参考阿里云官方文档进行简单上传</p><p>安装方法：<code>npm install aliyun-oss</code></p><h4 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h4><p>创建实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getClient() &#123;</span><br><span class="line">      let OSS &#x3D; require(&#39;ali-oss&#39;)</span><br><span class="line">      this.client &#x3D; new OSS(&#123;</span><br><span class="line">        region: &#39;oss-cn-beijing&#39;,</span><br><span class="line">        accessKeyId: &#39;LTAI*********jbo4&#39;,</span><br><span class="line">        accessKeySecret: &#39;6v*********ZMjkv&#39;,</span><br><span class="line">        bucket: &#39;bucket名&#39;,</span><br><span class="line">        path: &#39;存储路径，默认根目录&#39;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><ul><li><code>region</code>:查看方式：打开你的<code>oss</code>对象存储—&gt;Bucket列表—&gt;若未创建先创建一个—&gt;创建好后打开(如图，红色框中的就是region)</li></ul><p><img src="https://swl-kuzma.oss-cn-beijing.aliyuncs.com/markdown/20200505233409.png" alt=""></p><ul><li><code>accessKeyId</code>和<code>accessKeySecret</code>:查看方式：点击右上角头像—&gt;点击<code>AccessKey</code>管理—&gt;若没有还是先创建，查看<code>accessKeySecret</code>可能需要接收手机验证码获取</li></ul><h4 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h4><p>获取文件(这边我以上传图片为例)，并上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;file&quot; @change&#x3D;&quot;uploadImage($event)&quot;  id&#x3D;&quot;fileBox&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"> uploadImage() &#123;</span><br><span class="line">      this.getClient()</span><br><span class="line">      this.file &#x3D; event.target.files[0]</span><br><span class="line">      var _this &#x3D; this</span><br><span class="line">      async function put() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          let result &#x3D; await _this.client.put(event.target.files[0].name, _this.file)</span><br><span class="line">          _this.inageSrc &#x3D; result.url &#x2F;&#x2F;这个result.url就是上传后的图片链接</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">          console.log(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      put() &#x2F;&#x2F;不可去掉</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考阿里云官方文档进行简单上传&lt;/p&gt;
&lt;p&gt;安装方法：&lt;code&gt;npm install aliyun-oss&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;步骤一&quot;&gt;&lt;a href=&quot;#步骤一&quot; class=&quot;headerlink&quot; title=&quot;步骤一&quot;&gt;&lt;/a&gt;步骤一&lt;/h
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/06/hello-world/"/>
    <id>http://yoursite.com/2020/05/06/hello-world/</id>
    <published>2020-05-06T06:07:52.737Z</published>
    <updated>2020-05-06T12:26:30.980Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
